#include<arduinoFFT.h>

//double x[]={-87.17307638,-109.5495333,11.00037444,163.4286511,199.1497693,123.5660003,56.25558579,11.87495703,-18.97729813,-42.98507139,-49.50432452,-44.95819516,-33.93206642,-28.58275615,-31.58109989,-41.0802992,-54.49307368,-68.26273259,-80.63560247,-89.53265601,-97.96825536,-104.8688265,-109.0354357,-55.42792547,102.4289065,215.9352907,173.6592794,95.27713062,38.69934301,2.586699113,-27.11808597,-41.50592056,-38.88116345,-27.52106187,-19.43972127,-21.31888102,-29.19861314,-42.08703327,-57.83191118,-69.53303635,-80.46281953,-88.35226795,-94.97094082,-102.2065852,-97.71319214,4.172319927,174.7275931,221.5697151,147.842936,75.61863429,28.48903346,-4.64088307,-29.76995187,-35.85962812,-27.26819387,-12.26373734,-5.602559446,-9.189517172,-21.48116953,-38.07938735,-52.01784737,-63.35879895,-71.93471855,-79.04261272,-85.4265121,-86.88364206,-9.984335526,167.9810654,251.6113399,182.1367896,108.0062751,59.54909365,24.89964724,-5.472668004,-17.77934267
//};//signal 1 Fs=25Hz 
double x[]={-372.3628292,50.75906574,499.6210468,-336.9832284,-194.504521,-570.4131983,-129.7377686,560.0176664,-162.6301843,-241.049091,-345.3768694,-246.2627394,-532.3337975,-454.1922526,-617.5859731,502.7867022,302.4188989,-235.1789052,-215.4168262,-407.4876842,681.9321887,237.5584422,-231.6507305,-207.6717746,-539.4690781,510.0380345,569.1028258,-209.1779718,-117.5640572,-545.5633154,129.7289655,544.0285014,-221.9785502,-219.3977602,-409.6245983,-53.15070686,-524.5237492,-429.7457311,-687.3721612,112.2270592,155.5156477,-445.3194908,-260.988726,-653.9042776,267.1661915,320.2862136,-327.9218545,-186.6943664,-593.6471656,236.3833206,618.3802148,-193.6722552,-118.3165144,-521.6362812,104.001695,697.6731799,-135.4057213,-125.6024568,-447.1692011,-177.5848674,779.727025,44.77895239,-186.704134,-329.4899044,-416.5215007,606.8871171,175.9757746,-276.3665516,-243.3171493,-584.2947178,323.5642996,412.5329016,-317.7966551,-194.9143586,-608.4013166,43.98688969,450.3668628,-310.8877823,-249.5174339,-531.2441349,-336.9276643,603.9989054,22.88647289,-249.2701958,-283.0982045,-521.2360918,465.8596853,417.0870942,-223.4539054,-127.192763,-524.6455618,313.4949285,599.5930045,-206.8215434,-144.1229739,-527.4752016,-55.83263757,682.6191464,-84.033312,-198.5712584,-361.9537461,-457.9616445,557.6493688,242.7575051,-266.1135601,-213.8236372,-556.24835,332.4495136,302.499605,-333.2363737,-213.5981909,-610.5703529,25.74520944,561.2826499,-239.5299474,-193.7430017,-496.0222578,-218.5595457,604.5518599,-58.64324522,-212.6026756,-323.252457,-445.2422719,633.6913679,413.1880184,-169.288578,-107.617096,-479.3521203,319.4443227,635.3535822,-188.4962698,-126.7695867,-520.3712187,17.20231648,642.430029,-160.8179634,-162.8002053,-448.7397069,-234.6895348,674.4952485,-1.233956521,-208.1571117,-326.0423109,-439.3987654,573.1487589,204.8782082,-280.7233677,-228.9075206,-598.1363211,216.3079339,512.1277748,-260.7779505,-182.9745671,-519.8452394,-191.1325117,643.0931245,-43.92780173,-183.3742364,-336.2709097,-361.5423529,684.94201,271.46637,-163.6920349,-155.6494209,-464.8464164,517.0683594,497.0701591,-219.2874445,-147.7903479,-551.7472694,89.86154638,649.8993594,-169.2524534,-147.3279929,-463.1070207,-167.5600108,679.2028866,-95.35339172,-140.8059371,-425.5503589,194.1651403,-56.30059363,-344.4887429,-444.1835674,-211.0468417,247.3329856,-453.1318352,-275.7780006,-595.2578987,375.2374235,167.109732,-326.79802,-218.6305824,-570.2239094,513.9062141,664.966957,-115.7864814,-39.19240046,-437.6509235,248.1242884,854.1820392,-17.65190207,-99.13074265,-413.9399155,-189.4425751,776.8956783,67.81046605,-204.8196023,-316.8406599,-470.6797157,587.1638105,165.0532388,-220.9171849,-299.0803246,-282.3362929,-459.6964612,-476.0025286,-657.8846874,-36.28866976,611.095672,-270.0451442,-149.1496706,-552.7027601,-18.38833275,628.6379552,-194.1063973,-186.4013611,-460.0994276,-303.608706,715.171076,95.71312624,-196.2770219,-251.6015469,-448.5401135,617.0087294,448.7185764,-167.2101932,-95.96385438,-509.8408181,244.6564001,762.3511787,-101.0471042,-93.99502927,-441.8257657,-104.8673041,658.801781,-97.32354932,-228.7822057,-387.2044083,-471.9132075,538.8679212,148.5593336,-312.2890566,-244.1063443,-584.2857781,355.6797579,273.8099323,-259.2010529,-283.3043745,-291.3239989,-383.2092496,-515.3422463,-589.2413816,-318.4183185,701.2290534,-136.5587372,-146.0439276,-474.2268312,-53.24573525,626.5057709,-166.8540946,-209.8942913,-310.2995729,201.2068187,-359.9838455,-292.7140686,-531.5839014,479.3513229,452.7608323,-203.9984283,-109.0943937,-518.1939586,519.4449443,596.2184343,-182.8452654,-97.82411752,-528.3324741,280.6126544,613.5763384,-228.1419821,-137.2342068,-550.8750172,3.511930956,583.5717872,-223.8816207,-213.8729198,-464.0276534,-342.5752281,638.7791726,62.12691402
};// signal 2 Fs=10Hz
const int n = sizeof(x)/sizeof(double);
const double Fs=10;//25
const int l=8;
const int samples = pow(2,ceil(log(n)/log(2)));
int exponent;
//0.005Hz to 0.5Hz i.e. k1=1, k2=15, signal info :- Fs=10 for 30sec
const int k1=1;
const int k2=15;
arduinoFFT FFT = arduinoFFT();

void setup() {
  Serial.begin(9600);
  exponent = FFT.Exponent(samples);
}

void loop() {
  double y[n];

  //moving average filter
  for(int i=0;i<n;i++)
  {
    y[i]=0;
    for(int j=0;j<l;j++)
    {
      if(i>=j)
      y[i]+=x[i-j];
    }
    y[i]/=l;
  }

  //mean normalization
  double mean=0;
  for(int i=0;i<n;i++)
  {
    mean+=y[i];
  }
  mean/=n;
  for(int i=0;i<n;i++)
  {
    y[i]-=mean;
  }

  
  //DFT
  double X_mag[n];
  double X_real[n];
  double X_imag[n];
  for(int i=0;i<n;i++)
  {
    double real=0,imag=0;
    for(int j=0;j<n;j++)
    {
      real+=y[j]*cos(2*PI*i*j/n);
      imag+=y[j]*sin(2*PI*i*j/n);
    }
    X_real[i]=real;X_imag[i]=imag;
    X_mag[i]=sqrt(pow(real,2)+pow(imag,2));
  }
  
  //Data Prep for IDFT For respiration (0.005Hz to 0.5Hz i.e. k1=1, k2=15, signal info :- Fs=10 for 30sec) 
  double X_real1[n],X_mag1[n],X_imag1[n];
  for(int i=0;i<n;i++)
  {
    if(i>=k1&&i<=k2)
    {
      X_imag1[i]=X_imag[i];
      X_real1[i]=X_real[i];
      X_mag1[i]=X_mag[i];
    }
    else
    {
      X_imag1[i]=0;
      X_real1[i]=0;
      X_mag1[i]=0;
    }
  }
  
  //peak point detection
  int p=0;
  double max_f=0;
  for(int i=0;i<n/2;i++)
  {
    if(max_f<X_mag1[i])
    {
      p=i;
      max_f=X_mag1[i];
    }
  }
// Serial.println(60*p*Fs/n);
 

  //IDFT
  double x_rec[n];
  for(int i=0;i<n;i++)
  {
    x_rec[i]=0;
    for(int j=0;j<n;j++)
    {
      x_rec[i]+=X_real[j]*cos(2*i*j*PI/n)+X_imag[j]*sin(2*i*j*PI/n);
    }
    x_rec[i]/=n;
  }
  
//  for(int i=0;i<n;i++)
//  {
//    Serial.println(x_rec[i]);
//  }

  //Data Prep for FFT
  double vImag[samples],vReal[samples];
  for(int i=0;i<samples;i++)
  {
    if(i<n)
      vReal[i]=y[i];
    else
      vReal[i]=0;
      
    vImag[i]=0;
  }
  //FFT
 
  FFT.Compute(vReal,vImag,samples,exponent,FFT_FORWARD);
  FFT.ComplexToMagnitude(vReal,vImag,samples);
//  double peak = FFT.MajorPeak(vReal,samples,Fs);
//  Serial.println(peak*60);

  //Data Prep for IFFT For respiration (0.005Hz to 0.5Hz i.e. k1=1, k2=15, signal info :- Fs=10 for 30sec) 
  double vReal2[samples],vImag2[samples];
  for(int i=0;i<samples;i++)
  {
    if(i>=k1&&i<=k2)
      {
        vReal2[i]=vReal[i];
        vImag2[i]=vImag[i];
      }
    else{
      vReal2[i]=0;
      vImag2[i]=0;
    }
  }
//  double peak = FFT.MajorPeak(vReal2,samples,Fs);
//  Serial.print(60*peak);

//  IFFT 
  FFT.Compute(vReal2,vImag2,samples,exponent,FFT_REVERSE);
  for(int i=0;i<samples;i++)
  {
    Serial.println(vReal2[i]);
  }
  while(1);
 
}
