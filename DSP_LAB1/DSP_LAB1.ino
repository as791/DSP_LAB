

 ///////////////////////////////////////////////////////////////////////// Experiment - 1 ///////////////////////////////////////////////////////////////////////////////////////////////////// 
 
// Answers to the questions and thier implementation on hand with given PPG signal data.
//  
// a) The filter that smooth out high frequency noises that we want a LPF to be implemented i.e. MA Filter with large length (L).
// b) Derivative filters emphasizes the high slopes data in given data so using that filter for part-b
// c) Here we have to design MA Filter of L = floor(0.8*N) where N is size of data for extracting the baseline drift.
// d) Here first we have to apply first order derivative filter then MA Filter simulatenously of L=8.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////// Begining of the Code ////////////////////////////////////////////////////////////////////////////////////////////////////////
 
//////////////////////////////////////////////////////// Variables, Input and Output Initialization //////////////////////////////////////////////////////////////////////////////////////////

float x[]={-170.2280686,-245.299872,-225.747207,-250.9921812,-226.70691,-246.6909164,-246.1738123,-211.2549165,-219.9085797,-186.4930788,-186.1905097,-242.341203,-218.7244932,-246.1173118,-231.3075607,-208.1531898,-228.4143256,-217.0207018,-248.4072959,-231.2849788,-247.5071817,-252.2815291,-221.6834696,-208.5438301,-141.3693934,-37.58504509,20.03034524,53.68450756,49.65882474,-16.20994887,-37.86241107,-76.68704254,-107.8728968,-143.962574,-184.3005383,-153.6328498,-233.9703771,-201.7608606,-210.6823285,-225.9408437,-268.5082259,-242.6763931,-238.6451398,-214.331079,-196.9400491,-227.3118358,-182.4381397,-182.8100547,-228.0611479,-200.1742887,-230.1836501,-198.6359745,-210.4669651,-228.3083937,-232.3168127,-246.392582,-264.3670288,-262.1103215,-232.559881,-142.3957875,-134.6222069,-32.53555295,-12.05372674,49.87143256,48.59565744,-8.497074837,-59.56834538,-73.78016343,-96.58215554,-153.7952754,-156.705765,-197.0143871,-208.402174,-234.3835385,-272.7434344,-241.6165072,-248.7790334,-230.2930095,-221.0605052,-221.7006863,-218.3870514,-196.4207002,-210.2234173,-196.3907621,-190.2509651,-207.6957696,-196.0071832,-216.0597332,-222.9036438,-209.049247,-223.8261382,-244.228792,-233.3585418,-227.5901984,-188.9046581,-135.853463,-67.30435667,1.594047416,24.0525072,51.65873756,14.95505886,-28.79328281,-70.06025628,-114.0747757,-184.439431,-168.5061447,-186.0084191,-187.3700822,-254.3796073,-216.8105715,-250.0449216,-239.0042601,-254.408416,-241.0291168,-218.8171101,-227.8261237,-236.9126179,-193.1541219,-212.737703,-193.7353408,-226.3485624,-208.935556,-201.0384854,-237.8171281,-215.3579195,-230.2485128,-247.1438832,-215.8202409,-174.1977364,-191.229693,-113.9354299,-82.41156664,-29.46170096,17.76727946,21.4598918,-14.58704883,-18.09900013,-56.23192902,-92.89986571,-117.2917453,-162.901157,-164.9608496,-157.1891288,-169.3429776,-205.0751832,-195.5776279,-201.4579447,-189.1782756,-177.2149868,-182.0008866,-186.4915808,-154.770193,-204.496006,-197.3700446,-182.1135775,-173.7671096,-198.509983,-195.9487869,-213.4175939,-215.475677,-201.5757083,-202.4219476,-208.4754987,-177.1036168,-128.3212702,-78.25223562,-36.73674313,16.62339274,11.23176882,9.088963013,9.978606293,-3.371816142,-11.89300627,-80.00851327,-87.7317516,-117.1376118,-122.1998771,-149.9177533,-131.9342419,-153.2541525,-175.1096308,-171.5386672,-173.1108418,-160.5672859,-138.9890483,-172.786451,-142.5379471,-147.9393562,-175.2649247,-151.9683442,-155.1054059,-145.077961,-187.574229,-208.160428,-206.32917,-185.1628972,-173.221585,-133.0006624,-135.6483304,-42.2606882,17.86215051,42.48728141,62.22158176,88.58951467,13.76388321,1.923859574,-44.53011758,-73.28679352,-59.07686106,-109.1556155,-123.5272786,-157.7499381,-148.192279,-181.9661536,-184.7898953,-160.1993582,-170.8054484,-146.4710366,-171.4122306,-143.4581671,-160.9728244,-171.7810453,-172.2813723,-145.7897711,-170.1963931,-171.3601057,-171.3514733,-164.9889504,-183.6271999,-200.2537248,-213.0496562,-176.9405789,-184.185033,-102.3928901,-41.71423831,-3.235291257,29.52344051,26.00254396,26.18926949,-12.06486854,-10.83898399,-48.50293256,-44.59179763,-96.18344309,-100.9218639,-95.48078984,-127.9139621,-131.9721925,-103.884733,-122.3442795
};
const int n = sizeof(x)/sizeof(float);  // size of the data.
float y[n]={0};
int l = 8; // for a)  try different lengths to show effect of MA Filter as length increases :- 8,40,80. 
//int l = floor(0.8*n); // For part d) as given in question

///////////////////////////////////////////////////////// Declaring the functions to be used ///////////////////////////////////////////////////////////////////////////////////////////////// 

// Moving Average Filter of length L
// Can denoted by following difference equation:-
// y[n] = (1/L)(x[n]+x[n-1]+x[n-2]+.....+x[n-(L-1)]) 

void maf(float* x,float* y){
  for(int i=0;i<n;i++){
    float sum=0;
    for(int j=0;j<l;j++){
        if(i>=j)
        sum = sum + x[i-j];
    } 
    y[i] = sum/l;
  }
}

// Derivative Filters
//  1. First Order Difference Filter :- y[n] = x[n]-x[n-1]
//  2. Three Point Central Difference Filter :- y[n] = x[n]-x[n-2]

void first_order(float* x ,float* y)
{
  for(int i=1;i<n;i++)
  {
    y[i] = x[i] - x[i-1];
  }
}
void three_point(float* x,float* y){
  for(int i=2;i<n;i++)
  {
    y[i] = x[i] - x[i-2];
  }
}

/////////////////////////////////////////////////////////////// Main Setup and Loop /////////////////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  Serial.begin(9600); // serial initialization:
}
void loop() {
//  for(int i=0;i<n;i++){         // Display the given PPG signal
//    Serial.println(x[i]);
//  }
  
//  first_order(x,y);
//  three_point(x,y);
  maf(x,y);

for(int i=0;i<n;i++){         // Display the given signal along with filtered output with y axis shifted above with 200 units.
    Serial.print(x[i]);       
    Serial.print(",");
    Serial.println(y[i]+400);
  }
}
////////////////////////////////////////////////////////////////// End of the Code /////////////////////////////////////////////////////////////////////////////////////////////////////////////
